/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sistemas.operativos;

import java.util.ArrayList;
import java.math.BigInteger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author Thomas
 */
public class Magia extends javax.swing.JFrame {

    /**
     * Creates new form Particionesdinámicasconcompactación
     */
    Estrategias modelo;
    Object[][] tabla;
    ArrayList<ArrayList<Integer>> array = new ArrayList<ArrayList<Integer>>();

    Utils herramientas = new Utils();
    int ultimafila;

    public Magia(String estrategia) {
        Estrategia(estrategia);
        initComponents();

        if (estrategia.contains("Dinamicas")) {
            ultimafila = 2;
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    tabla = new Object[][]{
                        {null, null, null},
                        {null, null, null},
                        {null, null, null}
                    },
                    new String[]{
                        "Referencia", "Nombre Proceso", "Espacio"
                    }
            ));
        }
        if (estrategia.contains("Estaticas De Tamaño Variable")) {
            ultimafila = 3;
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    tabla = new Object[][]{
                        {"000000000", null, null, "256 mb"},
                        {null, null, null, "256 mb"},
                        {null, null, null, "512 mb"},
                        {null, null, null, "512 mb"},
                        {null, null, null, "1 gb"},
                        {null, null, null, "1 gb"},
                        {null, null, null, "256 mb"},
                        {null, null, null, "256 mb"}
                    },
                    new String[]{
                        "Referencia", "Nombre Proceso", "Espacio", "Particion"
                    }
            ));
            Posicionar();

        }
        if (estrategia.contains("Particiones Estaticas de Tamaño fijo")) {
            ultimafila = 3;
            jTable1.setModel(new javax.swing.table.DefaultTableModel(
                    tabla = new Object[][]{
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"},
                        {null, null, null, "400 mb"}
                    //0x00000000
                    },
                    new String[]{
                        "Referencia", "Nombre Proceso", "Espacio", "Particion"
                    }
            ));

            Posicionar();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Referencia", "Nombre Proceso", "Espacio", "Particion"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        jTextField1.setText("A");

        jLabel1.setText("Nombre proceso");

        jLabel2.setText("Tamaño");

        jTextField2.setText("20");
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jButton1.setText("Agregar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jTextField2, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(56, 56, 56)
                        .addComponent(jLabel2)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(21, 21, 21)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(jButton1)))
                .addContainerGap(25, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed
    BigInteger acumulado = new BigInteger("0");
    private void Posicionar() {
        
        BigInteger temp = new BigInteger("0");

        for (int i = 0; i < jTable1.getRowCount(); i++) {
            // si la primera casilla es nula y la ultima diferente de null
            
            if (jTable1.getValueAt(i, 0) == null && jTable1.getValueAt(i, ultimafila) != null) {
                
                
                temp = herramientas.calculate((String) jTable1.getValueAt(i, ultimafila));
                if (temp != null) {
                    acumulado = acumulado.add(temp);
                }
                jTable1.setValueAt(acumulado, i, 0);
            }
            //si la primera casilla no es nula o la ultima es null
            else {
                //si la primera casilla es nula 
                if (jTable1.getValueAt(i, 0) == null) {
                    try{
                        temp = new BigInteger(jTable1.getValueAt(i, 0).toString(), 16);
                    }catch(Exception e){
                        
                    }
                }
                acumulado.add(herramientas.HexTodecimal(temp.toString()));
            }

        }
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // Si no me he pasado
        if(acumulado.compareTo(herramientas.calculate("4 gb"))==-1){
            

            String nombre = jTextField1.getText();
            String tamaño = jTextField2.getText();
            BigInteger tamañoR = herramientas.calculate(tamaño);
            tamaño = tamañoR.toString();
            Boolean Agregar = true;
            int Borrar = 0;
            // recuperar la tabla y saber si voy a borrar o no
            for (int i = 0; i < jTable1.getRowCount(); i++) {
                for (int j = 0; j < jTable1.getColumnCount(); j++) {
                    tabla[i][j] = jTable1.getValueAt(i, j);
                    if (jTable1.getValueAt(i, j) != null) {
                        if (jTable1.getValueAt(i, j).toString().equalsIgnoreCase(nombre)) {

                            Agregar = false;
                            Borrar = i;
                        }
                    }
                }
            }
            //agregar proceso
            if (Agregar) {

                int filaSeleccionada = modelo.Posicion(tabla, tamaño);

                if (filaSeleccionada < tabla.length) {
                    jTable1.setValueAt(nombre, filaSeleccionada, 1);
                    jTable1.setValueAt(tamaño, filaSeleccionada, 2);

                } else {
                    DefaultTableModel modeloAcambiar = (DefaultTableModel) jTable1.getModel();
                    modeloAcambiar.addRow(new Object[]{null, null, null, null});

                    Object[][] tabla2 = new Object[tabla.length + 1][tabla[1].length];
                    for (int i = 0; i < tabla.length; i++) {
                        for (int j = 0; j < tabla[i].length; j++) {
                            tabla2[i][j] = tabla[i][j];
                        }
                    }
                    tabla = tabla2;
                    jTable1.setModel(modeloAcambiar);
                    jTable1.setValueAt(nombre, filaSeleccionada, 1);
                    jTable1.setValueAt(tamaño, filaSeleccionada, 2);

                }

            }//eliminar proceso
            else {
                jTable1.setValueAt(null, Borrar, 1);
                jTable1.setValueAt(null, Borrar, 2);
            }
            Posicionar();
        }else{
            JOptionPane.showMessageDialog(null, "NO SE PUEDE AGREGAR MAS ", "Advertencia", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void Estrategia(String Estrategia) {
        switch (Estrategia) {
            case "Particiones Dinamicas Con Compactacion":

                this.modelo = new DinamicasConCompactacion();
                break;
            case "Particiones Dinamicas Sin Compactacion con peor ajuste":

                this.modelo = new DinamicasSinCompactacion("PA");
                break;
            case "Particiones dinamicas sin conmpactacion con primer ajuste":
                this.modelo = new DinamicasSinCompactacion("PRA");
                break;
            case "Particiones Dinamicas sin Compactacion con mejor ajuste":
                this.modelo = new DinamicasSinCompactacion("MA");
                break;
            case "Particiones Estaticas de Tamaño fijo":

                this.modelo = new EstaticasDeTamañofijo();
                break;
            case "Particiones Estaticas De Tamaño Variable con peor ajuste":
                this.modelo = new EstaticasDeTamañoVariable("PA");
                break;
            case "Particiones Estaticas De Tamaño Variable con mejor ajuste":
                this.modelo = new EstaticasDeTamañoVariable("MA");
                break;
            case "Particiones Estaticas De Tamaño Variable con primer ajuste":
                this.modelo = new EstaticasDeTamañoVariable("PRA");
                break;

        }

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Magia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Magia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Magia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Magia.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
